{"version":3,"sources":["assets/direct.svg","assets/favoriets.svg","assets/logo.svg","assets/camera.svg","assets/home.svg","assets/search.svg","assets/instLogo.svg","assets/gradient.svg","fonts/SFUIText-Bold.ttf","fonts/SFUIText-Regular.ttf","assets/menu.svg","assets/like.svg","assets/comment.svg","components/Header.tsx","services/apiService.ts","services/index.ts","services/usersService.ts","stores/RouterStore.ts","stores/AccountStore.ts","services/postsService.ts","stores/PostStore.ts","stores/RootStore.ts","stores/useStores.ts","services/commentsService.ts","stores/CommentStore.ts","components/Footer.tsx","components/Stories/Avatar.tsx","components/Stories/Stories.tsx","components/Stories/index.tsx","components/Loading.tsx","components/Posts/Post/PostHead.tsx","components/Posts/Post/PostFooter.tsx","components/Posts/Post/Post.tsx","components/Posts/Post/index.tsx","components/Posts/Posts.tsx","components/Posts/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Root","styled","div","Image","img","Header","src","camera","alt","logo","direct","_apiBase","fetch","this","window","bind","apiBase","path","params","defaultParams","method","data","searchParameters","Error","URLSearchParams","toString","url","URL","href","headers","body","JSON","stringify","then","response","a","ok","json","err","message","apiService","init","process","API_BASE","ROUTES","users","require","user","id","makeApiRequest","createUser","updateUser","deleteUser","AccountStore","rootStore","undefined","observable","action","usersService","runInAction","initialized","computed","posts","post","createPost","updatePost","deletePost","PostStore","postsService","initialised","console","log","RouterStore","history","createBrowserHistory","sync","location","currentPath","pathname","currentHash","hash","searchParams","search","listen","ROOT","RootStore","initState","accountStore","postStore","commentStore","routerStore","CommentStore","Promise","all","storesContext","React","createContext","useStores","useContext","comments","comment","createComment","updateComment","deleteComment","commentsService","Footer","useObserver","activeUser","home","instLogo","favorites","avatar","style","borderRadius","ImageWrapper","gradient","Name","Avatar","name","Text","AvatarContainer","Stories","display","justifyContent","marginBottom","map","index","key","Arrow","marginRight","width","height","viewBox","fill","xmlns","d","Loading","Img","Location","MenuContainer","NameContainer","PostHead","flexDirection","menu","LeftBar","span","bold","link","thin","CommentContainer","PostFooter","useState","openedComments","setOpenedComments","like","favoriets","likes","description","content","cursor","marginLeft","onClick","length","PostPic","Post","photo","Posts","injectGlobal","sfuiBold","sfui","Layout","ScrollContainer","App","Boolean","hostname","match","mobxStore","ReactDOM","render","StrictMode","Provider","value","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.60659d39.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/direct.8688000c.svg\";","module.exports = __webpack_public_path__ + \"static/media/favoriets.005aa7b5.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.64553869.svg\";","module.exports = __webpack_public_path__ + \"static/media/camera.88c822d6.svg\";","module.exports = __webpack_public_path__ + \"static/media/home.ca5da6e7.svg\";","module.exports = __webpack_public_path__ + \"static/media/search.8d561a8f.svg\";","module.exports = __webpack_public_path__ + \"static/media/instLogo.01d85b9b.svg\";","module.exports = __webpack_public_path__ + \"static/media/gradient.074c3a06.svg\";","module.exports = __webpack_public_path__ + \"static/media/SFUIText-Bold.49d167fd.ttf\";","module.exports = __webpack_public_path__ + \"static/media/SFUIText-Regular.1e1d803a.ttf\";","module.exports = __webpack_public_path__ + \"static/media/menu.68d76883.svg\";","module.exports = __webpack_public_path__ + \"static/media/like.951c9e4d.svg\";","module.exports = __webpack_public_path__ + \"static/media/comment.4a4f020b.svg\";","import styled from \"@emotion/styled\";\nimport React from \"react\";\nimport logo from \"../assets/logo.svg\";\nimport camera from \"../assets/camera.svg\";\nimport direct from \"../assets/direct.svg\";\n\nconst Root = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 58px;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.15);\n  padding: 0 13px;\n  box-sizing: border-box;\n  background: #fafafa;\n`;\n\nconst Image = styled.img`\n  cursor: pointer;\n`;\n\nconst Header: React.FC = () => (\n  <Root>\n    <Image src={camera} alt=\"camera\" />\n    <Image src={logo} alt=\"logo\" />\n    <Image src={direct} alt=\"direct\" />\n  </Root>\n);\n\nexport default Header;\n","interface IParams {\n  method?: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\";\n  searchParameters?:\n    | string[][]\n    | Record<string, string>\n    | string\n    | URLSearchParams;\n  data?: any;\n}\n\nexport class ApiService {\n  private _apiBase?: string;\n  private fetch: typeof fetch;\n\n  constructor() {\n    this.fetch = window.fetch.bind(window);\n  }\n\n  init(apiBase: string) {\n    this._apiBase = apiBase;\n  }\n\n  async makeApiRequest(path: string, params?: IParams): Promise<any> {\n    const defaultParams = { method: \"GET\" };\n    const { method, data, searchParameters } = { ...defaultParams, ...params };\n    if (!this._apiBase) {\n      throw new Error(\"Network Service not Initialized\");\n    }\n    if (searchParameters != null) {\n      path += \"?\" + new URLSearchParams(searchParameters).toString();\n    }\n    const url = new URL(path, this._apiBase);\n    return this.fetch(url.href, {\n      method: method,\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    }).then(async (response) => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        const err = await response.json();\n        throw new Error(err?.message ?? \"Unknown error\");\n      }\n    });\n  }\n}\n\nexport default new ApiService();\n","import apiService from \"./apiService\";\n\napiService.init(process.env.API_BASE ?? \"http://localhost:5000\");\nexport { apiService };\n","import { apiService } from \"./index\";\nimport { IUser } from \"../interfaces\";\n\n//api -> service -> store -> (vm) -> component\n\ntype TUpdateUserParams = Omit<IUser, \"_id\">;\n\nexport default {\n  // users: (): Promise<IUser[]> => apiService.makeApiRequest(`api/v1/users`),\n  users: async (): Promise<IUser[]> => require('./usersDefaultData.json'),\n\n  user: (id: string): Promise<IUser> =>\n    apiService.makeApiRequest(`api/v1/users/${id}`),\n\n  createUser: (data: TUpdateUserParams): Promise<IUser> =>\n    apiService.makeApiRequest(`api/v1/users/`, { method: \"POST\", data }),\n\n  updateUser: (id: string, data: TUpdateUserParams): Promise<IUser> =>\n    apiService.makeApiRequest(`api/v1/users/${id}`, { method: \"PUT\", data }),\n\n  deleteUser: (id: string): Promise<IUser> =>\n    apiService.makeApiRequest(`api/v1/users/${id}`, { method: \"DELETE\" }),\n};\n","import { RootStore } from \"./index\";\nimport { createBrowserHistory, Location } from \"history\";\nimport { observable, runInAction } from \"mobx\";\n\nexport enum ROUTES {\n  ROOT = \"/\",\n}\n\nexport default class RouterStore {\n  public rootStore: RootStore;\n  public history = createBrowserHistory();\n\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    this.history.listen((location, action) => {\n      this.sync(location);\n    });\n    this.sync(this.history.location);\n  }\n\n  @observable\n  currentPath: ROUTES = ROUTES.ROOT;\n\n  @observable\n  currentHash = \"\";\n\n  @observable\n  searchParams = new URLSearchParams();\n\n  sync = (location: Location) => {\n    runInAction(() => {\n      this.currentPath = location.pathname as any;\n      this.currentHash = location.hash;\n      this.searchParams = new URLSearchParams(location.search);\n    });\n  };\n}\n","import { RootStore } from \"./index\";\nimport { action, computed, observable, runInAction } from \"mobx\";\nimport usersService from \"@services/usersService\";\nimport { IUser } from \"../interfaces\";\n\nexport default class AccountStore {\n  rootStore: RootStore;\n\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n  }\n\n  @observable initialized = false;\n  @observable users: IUser[] = [];\n\n  @action sync = async () => {\n    const users = await usersService.users();\n    runInAction(() => {\n      this.users = users;\n      this.initialized = true;\n    });\n  };\n\n  @computed get activeUser(): IUser | undefined {\n    return this.users[0] ?? undefined;\n  }\n}\n","import { apiService } from \"./index\";\nimport { IPost } from \"../interfaces\";\n\n//api -> service -> store -> (vm) -> component\n\ntype TUpdatePostParams = Omit<IPost, \"_id\">;\n\nexport default {\n  // posts: (): Promise<IPost[]> => apiService.makeApiRequest(`api/v1/posts`),\n  posts: async (): Promise<IPost[]> => require('./postsDefaultData.json'),\n\n  post: (id: string): Promise<IPost> =>\n    apiService.makeApiRequest(`api/v1/posts/${id}`),\n\n  createPost: (data: TUpdatePostParams): Promise<IPost> =>\n    apiService.makeApiRequest(`api/v1/posts/`, { method: \"POST\", data }),\n\n  updatePost: (id: string, data: TUpdatePostParams): Promise<IPost> =>\n    apiService.makeApiRequest(`api/v1/posts/${id}`, { method: \"PUT\", data }),\n\n  deletePost: (id: string): Promise<IPost> =>\n    apiService.makeApiRequest(`api/v1/posts/${id}`, { method: \"DELETE\" }),\n};\n","import { RootStore } from \"./index\";\nimport { action, observable, runInAction } from \"mobx\";\nimport { IPost } from \"../interfaces\";\nimport postsService from \"@services/postsService\";\n\nexport default class PostStore {\n  rootStore: RootStore;\n\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n  }\n\n  @observable initialised = false;\n  @observable posts: IPost[] = [];\n\n  @action sync = async () => {\n    const posts = await postsService.posts();\n    runInAction(() => {\n      this.posts = posts;\n      this.initialised = true;\n    });\n    console.log(this.initialised);\n  };\n\n}\n","import { AccountStore, PostStore, RouterStore , CommentStore} from \"./index\";\nimport { computed } from \"mobx\";\n\nexport default class RootStore {\n  public accountStore: AccountStore;\n  public postStore: PostStore;\n  public commentStore: CommentStore;\n  public routerStore: RouterStore;\n\n  constructor(initState?: any) {\n    this.accountStore = new AccountStore(this);\n    this.commentStore = new CommentStore(this);\n    this.postStore = new PostStore(this);\n    this.routerStore = new RouterStore(this);\n\n    Promise.all([this.accountStore.sync(), this.postStore.sync(), this.commentStore.sync()]).then();\n\n    console.log(this);\n  }\n\n  @computed\n  get initialized() {\n    return this.accountStore.initialized && this.postStore.initialised && this.commentStore.initialised;\n  }\n}\n","import React from \"react\";\nimport RootStore from \"@stores/RootStore\";\n\nexport const storesContext = React.createContext<RootStore | null>(null);\n\nexport const useStores = () => {\n  const rootStore = React.useContext(storesContext);\n  if (rootStore == null) {\n    throw new Error(\"No RootStore found i context\");\n  }\n  return rootStore;\n};\n","import { apiService } from \"./index\";\nimport { IComment } from \"../interfaces\";\n\n//api -> service -> store -> (vm) -> component\n\ntype TUpdateCommentParams = Omit<IComment, \"_id\">;\n\nexport default {\n  // comments: (): Promise<IComment[]> => apiService.makeApiRequest(`api/v1/comments`),\n  comments: async (): Promise<IComment[]> => require('./commentsDefaultData.json'),\n\n  comment: (id: string): Promise<IComment> =>\n    apiService.makeApiRequest(`api/v1/comments/${id}`),\n\n  createComment: (data: TUpdateCommentParams): Promise<IComment> =>\n    apiService.makeApiRequest(`api/v1/comments/`, { method: \"POST\", data }),\n\n  updateComment: (id: string, data: TUpdateCommentParams): Promise<IComment> =>\n    apiService.makeApiRequest(`api/v1/comments/${id}`, { method: \"PUT\", data }),\n\n  deleteComment: (id: string): Promise<IComment> =>\n    apiService.makeApiRequest(`api/v1/comments/${id}`, { method: \"DELETE\" }),\n};\n","import { RootStore } from \"./index\";\nimport { action, observable, runInAction } from \"mobx\";\nimport { IComment } from \"../interfaces\";\nimport commentsService from \"@services/commentsService\";\nexport default class PostStore {\n  rootStore: RootStore;\n\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n  }\n\n  @observable initialised = false;\n  @observable comments: IComment[] = [];\n\n  @action sync = async () => {\n    const comments = await commentsService.comments();\n    runInAction(() => {\n      this.comments = comments;\n      this.initialised = true;\n    });\n    console.log(this.initialised);\n  };\n\n}\n","import styled from \"@emotion/styled\";\nimport React from \"react\";\nimport home from \"../assets/home.svg\";\nimport search from \"../assets/search.svg\";\nimport favorites from \"../assets/favoriets.svg\";\nimport instLogo from \"../assets/instLogo.svg\";\nimport { IUser } from \"../interfaces\";\nimport { useObserver } from \"mobx-react-lite\";\nimport { useStores } from \"@stores\";\n\ninterface IProps {\n  user?: IUser;\n}\n\nconst Root = styled.div`\n  display: flex;\n  justify-content: space-between;\n  border-top: 1px solid rgba(0, 0, 0, 0.15);\n  align-items: center;\n  min-height: 55px;\n  padding: 0 13px;\n  box-sizing: border-box;\n  flex-shrink: 0;\n  background: #fafafa;\n  box-shadow: 0px -1px 0px rgba(0, 0, 0, 0.15);\n`;\n\nconst Image = styled.img`\n  cursor: pointer;\n  width: 22px;\n  height: 22px;\n`;\n\nconst Footer: React.FC<IProps> = ({ user }) => {\n  const {accountStore} = useStores()\n  return useObserver(() => {\n    const user = accountStore.activeUser\n      return <Root>\n        <Image src={home} alt=\"camera\" />\n        <Image src={search} alt=\"logo\" />\n        <Image src={instLogo} alt=\"direct\" />\n        <Image src={favorites} alt=\"direct\" />\n        {user ? (\n          <Image src={user.avatar} alt=\"image\" style={{ borderRadius: \"50%\" }} />\n        ) : (\n          <Image src=\"https://cdn0.iconfinder.com/data/icons/instagram-ui-1/24/Instagram-UI_account-512.png\" />\n        )}\n      </Root>;\n    }\n  );\n}\nexport default Footer;\n","import styled from \"@emotion/styled\";\nimport React from \"react\";\nimport gradient from \"../../assets/gradient.svg\";\n\ninterface IProps {\n  src: string;\n  name: string;\n}\n\nconst Root = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ImageWrapper = styled.div`\n  display: flex;\n  background: url(${gradient});\n  min-width: 64px;\n  height: 64px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 8px;\n`;\n\nconst Image = styled.img`\n  width: 56px;\n  height: 56px;\n  border-radius: 50%;\n`;\n\nconst Name = styled.div`\n  /* font-family: SF UI Text; */\n  font-size: 10px;\n  line-height: 10px;\n\n  align-items: center;\n  text-align: center;\n  letter-spacing: -0.165px;\n\n  color: #000000;\n`;\n\nconst Avatar: React.FC<IProps> = ({ src, name }) => {\n  return (\n    <Root>\n      <ImageWrapper>\n        <Image src={src} alt=\"ava\" />\n      </ImageWrapper>\n      <Name>{name}</Name>\n    </Root>\n  );\n};\n\nexport default Avatar;\n","import styled from \"@emotion/styled\";\nimport React from \"react\";\nimport Avatar from \"./Avatar\";\nimport { useObserver } from \"mobx-react-lite\";\nimport { useStores } from \"@stores\";\n\ninterface IProps {}\n\nconst Root = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 12px 10px;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.15);\n  background: #fafafa;\n`;\n\nconst Text = styled.div`\n  font-size: 11px;\n  line-height: 18px;\n  font-weight: bold;\n  letter-spacing: -0.165px;\n  display: flex;\n  align-items: center;\n  color: #000000;\n`;\n\nconst AvatarContainer = styled.div`\n  display: flex;\n  overflow-x: auto;\n\n  margin: -9px;\n  & > * {\n    margin: 9px;\n  }\n`;\n\nconst Stories: React.FC<IProps> = () => {\n  const { accountStore } = useStores();\n  return useObserver(() => (\n    <Root>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          marginBottom: 10,\n        }}\n      >\n        <Text>Stories</Text>\n        <Text>\n          <Arrow />\n          Watch all\n        </Text>\n      </div>\n      <AvatarContainer>\n        {accountStore.users.map(({ avatar, name }, index) => (\n          <Avatar src={avatar} name={name} key={index} />\n        ))}\n      </AvatarContainer>\n    </Root>\n  ));\n};\n\nexport default Stories;\n\nconst Arrow = () => (\n  <svg\n    style={{ marginRight: 8 }}\n    width=\"7\"\n    height=\"10\"\n    viewBox=\"0 0 7 10\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path d=\"M7 5L0.25 9.33013L0.25 0.669872L7 5Z\" fill=\"#4F4F4F\" />\n  </svg>\n);\n","import Stories from \"./Stories\";\nexport default Stories;\n","import styled from \"@emotion/styled\";\nimport React from \"react\";\n\ninterface IProps {}\n\nconst Root = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Loading: React.FC<IProps> = () => {\n  return <Root>Loading...</Root>;\n};\nexport default Loading;\n","import styled from \"@emotion/styled\";\nimport React from \"react\";\nimport { IPost } from \"../../../interfaces\";\nimport menu from \"../../../assets/menu.svg\";\ninterface IProps {\n  post: IPost;\n}\n\nconst Root = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 10px 10px 15px 10px;\n`;\nconst Img = styled.img`\n  width: 36px;\n  height: 36px;\n  border-radius: 50%;\n`;\n\nconst Name = styled.div`\n  /* font-family: SF UI Text; */\n  font-size: 11px;\n  line-height: 11px;\n  letter-spacing: -0.165px;\n  font-weight: bold;\n  color: #000000;\n`;\nconst Location = styled.div`\n  /* font-family: SF UI Text; */\n  font-size: 10px;\n  line-height: 11px;\n  letter-spacing: -0.165px;\n\n  color: #000000;\n`;\n\nconst MenuContainer = styled.img`\n  align-self: flex-start;\n  padding: 10px 0;\n`;\n\nconst NameContainer = styled.div`\n  align-items: center;\n  display: flex;\n  margin: -4px;\n  & > * {\n    margin: 4px;\n  }\n`;\n\nconst PostHead: React.FC<IProps> = ({ post}) => {\n  console.log(post);\n  return (\n    <Root>\n      <NameContainer>\n        <Img alt=\"avatar\" src={post.user.avatar} />\n        <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n          <Name>{post.user.name}</Name>\n          <Location>{post.location}</Location>\n        </div>\n      </NameContainer>\n\n      <MenuContainer src={menu} alt=\"menu\" />\n    </Root>\n  );\n};\n\nexport default PostHead;\n","import styled from \"@emotion/styled\";\nimport React, { useState } from \"react\";\nimport like from \"@src/assets/like.svg\";\nimport comment from \"@src/assets/comment.svg\";\nimport direct from \"@src/assets/direct.svg\";\nimport favoriets from \"@src/assets/favoriets.svg\";\nimport { IPost , IComment} from \"@src/interfaces\";\n\ninterface IProps {\n  post: IPost;\n  comments: IComment[];\n}\n\nconst Root = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 0 13px;\n  box-sizing: border-box;\n`;\n\nconst Image = styled.img`\n  cursor: pointer;\n`;\n\nconst LeftBar = styled.div`\n  display: flex;\n  align-items: center;\n  margin: -8px;\n  & > * {\n    margin: 8px;\n  }\n`;\n\nconst Text = styled.span<{ bold?: boolean; link?: boolean; thin?: boolean }>`\n  font-size: 11px;\n  line-height: 14px;\n  letter-spacing: -0.165px;\n  font-weight: ${({ bold }) => (bold ? \"bold\" : \"normal\")};\n  font-weight: ${({ bold }) => (bold ? \"bold\" : \"normal\")};\n  color: ${({ link, thin }) => {\n  if (link) return \"rgb(58,158,213)\";\n  else if (thin) return \"rgba(0, 0, 0, 0.4)\";\n  else return \"#000000\";\n}};\n`;\n\nconst CommentContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding-left: 8px;\n  & > * {\n    margin-bottom: 8px;\n  }\n`;\n\nconst PostFooter: React.FC<IProps> = ({post, comments}) => {\n    const [openedComments, setOpenedComments] = useState<boolean>(false);\n\n    return (\n      <Root>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            width: \"100%\",\n            height: 48\n          }}\n        >\n          <LeftBar>\n            <Image src={like} alt=\"like\" />\n            <Image src={comment} alt=\"comment\" />\n            <Image src={direct} alt=\"direct\" />\n          </LeftBar>\n          <Image src={favoriets} alt=\"favoriets\" />\n        </div>\n        <Text style={{ marginBottom: 8 }} bold>\n          {post.likes}&nbsp;J’aime\n        </Text>\n        <Text style={{ marginBottom: 8 }}>\n          <Text bold>{post.user.name}&nbsp;</Text>\n          {post.description}\n        </Text>\n        {openedComments ? (\n          <CommentContainer>\n            {comments.map((comment, key) => (\n              <Text key={key}>\n                <Text bold>{comment.user.name}&nbsp;</Text>\n                {comment.content}\n              </Text>\n            ))}\n            <Text\n              style={{ marginBottom: 24, cursor: \"pointer\", marginLeft: -8 }}\n              onClick={() => setOpenedComments(false)}\n              thin\n            >\n              Hide this shit\n            </Text>\n          </CommentContainer>\n        ) : (\n          <Text\n            style={{ marginBottom: 24, cursor: \"pointer\" }}\n            onClick={() => setOpenedComments(true)}\n            thin\n          >\n            Voir les &nbsp;{comments.length}&nbsp;commentaires\n          </Text>\n        )}\n      </Root>\n    );\n  }\n;\n\nexport default PostFooter;\n","import styled from \"@emotion/styled\";\nimport React from \"react\";\nimport { IPost , IComment} from \"@src/interfaces\";\nimport PostHead from \"./PostHead\";\nimport PostFooter from \"./PostFooter\";\n\ninterface IProps {\n  post: IPost;\n  comments: IComment[];\n}\n\nconst Root = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst PostPic = styled.img`\n  display: flex;\n  flex-direction: column;\n  width: 414px;\n  height: 375px;\n`;\n\nconst Post: React.FC<IProps> = ({ post , comments}) => {\n  console.log(comments);\n  return (\n    <Root>\n      <PostHead post={post} />\n      <PostPic src={post.photo} />\n      <PostFooter post={post} comments={comments} />\n    </Root>\n  );\n};\n\nexport default Post;\n","import Post from \"./Post\";\nexport default Post;\n","import styled from \"@emotion/styled\";\nimport React from \"react\";\nimport { useObserver } from \"mobx-react-lite\";\nimport Post from \"@components/Posts/Post\";\nimport { useStores } from \"@stores\";\n\ninterface IProps {}\n\nconst Root = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Posts: React.FC<IProps> = () => {\n  const {postStore, commentStore} = useStores()\n  return useObserver(() =><Root>\n    {postStore.posts.map((post, index) => (\n      <Post post={post} key={index} comments={commentStore.comments} />\n    ))}\n  </Root>);\n}\nexport default Posts;","import Posts from './Posts'\nexport default Posts;","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport Header from \"@components/Header\";\nimport Footer from \"@components/Footer\";\nimport Stories from \"@components/Stories\";\nimport { injectGlobal } from \"emotion\";\nimport sfuiBold from \"./fonts/SFUIText-Bold.ttf\";\nimport sfui from \"./fonts/SFUIText-Regular.ttf\";\nimport { useObserver } from \"mobx-react-lite\";\nimport { useStores } from \"@stores\";\nimport Loading from \"@components/Loading\";\nimport Posts from \"@components/Posts\";\n\ninjectGlobal`\n  * {\n    box-sizing: border-box;\n  }\n  @font-face {\n    font-family: \"SF UI Text\";\n    font-weight: bold;\n    src: url(${sfuiBold});\n  }\n  @font-face {\n    font-family: \"SF UI Text\";\n    src: url(${sfui});\n  }\n`;\n\nconst Root = styled.div`\n  display: flex;\n  justify-content: center;\n  font-family: SF UI Text;\n  height: 100vh;\n`;\n\nconst Layout = styled.div`\n  display: flex;\n  flex-direction: column;\n  max-width: 414px;\n  flex: 1;\n`;\n\nconst ScrollContainer = styled.div`\n  overflow-y: auto;\n`;\n\nconst App: React.FC = () => {\n  const rootStore = useStores();\n  const initialized = useObserver(() => rootStore.initialized);\n  console.log(initialized);\n  if (!initialized) return <Root><Loading /></Root>;\n  return (\n    <Root>\n      <Layout>\n        <ScrollContainer>\n          <Header />\n          <Stories />\n          <Posts />\n        </ScrollContainer>\n        <Footer />\n      </Layout>\n    </Root>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Router } from \"react-router-dom\";\nimport { RootStore, storesContext } from \"@stores\";\n\nconst mobxStore = new RootStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <storesContext.Provider value={mobxStore}>\n      <Router history={mobxStore.routerStore.history}>\n        <App />\n      </Router>\n    </storesContext.Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}